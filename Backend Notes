Backend Notes

Examples of backend code:
	- api that parse URL parameters to provide selective JSONs
	- firebase methods that provide a timestamp back to users
	- clicking an invoice that provides a pdf report
	- image processesing software that takes an image applies a filter, then saves the new version
	- google providing results relevant to your searches on other sites

What is a server?
	- A web server takes a client request and gives something back. (Request & Response)
	- Server could be software or hardware


Intro to Node Js!
	- Node js is an open source, cross platform javascript runtime environment designed to be run outside of browsers
	- It is a general utility that can be used for a variety of purposes including asset compilation, scripting,
	  monitoring, and most notably as the basis for web servers
	- Can be used to make applications as well

Why Use NodeJS as a Server?
	- It re-uses Javascript = meaning a front end javascript developer can also build an entire server themselves
	- Its easily extendable = numerous plugins exist to expand the capabilities of nodeti
	- Fast Implementation = which allows for the creation of an entire working server with only a few lines of code
	- Single Threaded Asycncronous Model = meaning the server handles all requests using a single thread through event based	  callbacks. No limit on requests. No bottleneck.

Look up Node: 'exports' documentation and 'require' documentation

To import libraeries, you use the require' keyword.
	ex: var fs = require('fs');

	Terminology:
		fs.writeFile('movies.txt', 'inception, die hard', function(){
			console.log('complete')
		}

		console.log('hello world');

		'hello world' appears first!!! Because of the time it takes to read to the data inside.

		This shows how Node is asychronous!!

		fs.readFile('movies.txt', 'utf8', function(error, data){
			if(error){
				console.log('there is an error');
			}
			else{
			console.log(data);
			}
		})

		If you want it to wait:
			var fileContents = fs.writeFileSync('movies.txt', 'random text blah blah blah');

			var readFile = fs.readFileSync('movies.txt', 'utf8'); 

			console.log(readFile); //Shows the contents of the file

			*This is not favorable on web server, because people would have to wait


Another library is request:
	ex: var request = require('request');

	request('')


require('request') = example of pulling an api from backend, similar to ajax call

Look up inquier library from npm

WHEN LOOKING UP OTHER JS FILES, DO require('/.liri.js'), you NEED the /. to access a file in the same directory!!!!!



Look up how to set up a 'constructor' function!!! it uses keyword 'this'; also the function is called 'Animal'
capital letters to start functions almost guarentee constructor function


Look up prototype, in terms of modifying class definition.