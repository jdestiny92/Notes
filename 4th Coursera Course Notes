4th Coursera Course Notes

Web content(Html, css, javascript) goes to either a browser or an App with WebView

Web applications for mobile can be developed in two ways:
	1. Fully client side application installed on the device
	2. Mobile web application developed using web standards and accessed through a web browser

We'll be doing the hybrid app developent approach!

Hybrid App Development Approaches:
	1. WebView App
	- The HTML, CSS, and Javascript code base runs in an internal browser (called WebView) that is 
	wrapped in a native app. Some native APIs are exposed to JavaScript through this wrapper
	- Examples: Cordova/Phonegap, Trigger.io

	2. Compiled hybrid app
	- The code is written in one language(such as #C or Javascript) and gets compiled to native code
	for each supported platform. The result is a native app for each platform, but less freedom during development.
	- Examples: Appcelerator Titanium, Xamarin, Embarcadero FireMonkey


Advantages of Hybrid Approach:
	- Developer can use existing web skills
	- One code base for multiple platforms
	- Reduced development time and cost
	- Easily design for various form factors (including tablets) using responsive web design
	- Access to some device and operating system features
	- Advanced offline capabilities
	- Increased visibility because the app can be distributed natively(via app stores) & to mobile browsers(via search engines)

Hybrid Apps Work Best:
	For content driven apps
		- Business and Productivity
		- Enterprise
		- Media


SDK = Software Development Kit




Ionic and Angular Js:

An ionic app is basically an Angular single page application
- all the angular features are accesible within Ionic

Ionic uses Angular-UI Router for developing SPA

Ionic adds its own services and directives that can be used in the design of your app
- Ionic's own services like $loading, $actionSheet, etc.
- Ionic directives like <ion-view>, <ion-content>, <ion-list>, <ion-tabs>, etc.
- <ion-nav-view> is used to render your templates
- Ionic keeps track of your navigation history

Ionic Navigation
- <ion-nav-bar> for creating a top/header bar that will automatically update as the application state changes
- <ion-nav-back-button> adds back button to the NavBar
- <ion-side-menus> to add a container for side menu and main content
- <ion-side-menu-content> a container to hold the main content
- <ion-side-menu> a container for the side menu

Ionic Templates
- <ion-view> container for view content, navigational and header bar
	*Takes an optional view-title attribute that it makes available to the <ion-nav-view>
- <ion-content> provides an easy to use content area. Can use Ionic's custom scroll view




Ionic Css Components:
	Ionic's CSS classes can be used independent of the Ionic Angular directives

	Ionic use SASS to define the CSS classes

Use "item-text-wrap" as part of a div class to completely wrap all text onto the screen


Wrap everything in a Ionic 'Card Class'
	makes everything into a nice and organized element

ionList <ion-list> directives provide various interaction modes such as swipe to edit, drag to reorder, and deleting items
	Basic usage: <ion-list>
					<ion-item>....</ion-item>
				 <ion-list>


Ionic Grid:
	you can use percentages!
	OR if you just right col, it takes up as much space as possible, ex: col, col, col, each will take a third of page
	OR col-x, where x is a percentage, or col-offset-x, where x is a percentage
	Also possible vertical alignment: col-top, col-center, col-bottom
	Additionally, you can do row-top, row-center, row-bottom, and it will apply to every column in the row

	