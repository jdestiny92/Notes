Angular Js Notes!!!

Angular is  a structural framework for dynamic web applications. HTML does ONLY STATIC applications.
Angular fills in the gap to support dynamic applications: such as, CRUD(create read update delete) Applications! 

How to get started:
	<script src="scripts/angular.min.js"></script>

Angular Built in Directives = HTML custom attributes
Angular: ng-* attributes/ data-ng-*
Example: ng-app, ng-bind, ng-model, ng-init, ng-repeat

ngApp Directive:
	it is applied to an HTML tag to specifiy the root of the application. So depending on what tag you apply it to, Angular is only effective within that tag. For example, say you apply to <html> then it applies to the entire page!

ngInit Directive:
	is used to evaulate an expression. It can also be used to initialize a javascript variable. 
	example: <p ng-init="index=1"></p>  OR 
	<div class="row row-content" ng-init="dish={name:'Uthapizza',...}"></div>

Angular Expressions:
	are simple javascript expressions. They are evaluated against Angular "scope" object. No conditionals, loops, or exceptions. 
	They are enclosed in {{ expression }}

	example: <p>6 + 5 = {{ 6 + 5}} </p>

				OR

	<div class="media-body">
		<h2 class="media-heading">{{dish.name}}</h2>
		<p>{{dish.description}}</p>
	</div>


ngModel Directive:
allows you to bind an input value to a javascript variable with the "Scope" - has to do with two way data binding. 

Example:

<div class="media-body">
....
<p>{{dish.description}}</p>
<p>Comment:{{dish.comment}}</p>
<p>Type your comment:
	<input type="text" ng-model="dish.comment"></p>
</div>

Two Way Data Binding:
	Binding an HTMl or CSS property to a JavaScript variable. When one is updated, the other is also simultaneously. Also works vica versa with <input> fields.
	Example: typing in an input field automatically types the same on the html page.


ngRepeat Directive:
	it is a looping costruct. Loops over items in a collection. Instantiates/initialize a template for each item. 


Bower!!!:
	use from terminal. First message is "Bower install"


To Be Able to Use Angular:
	You need to add a script src at the end of the body tag. Also, in the beginning you need this tag: <html lang="en" ng-app>


Design Patterns:
	Well documented solution to a reoccuring problem. Also known as Software Engineering Pattern.

One example of a software engineering pattern is the "Model View Controller"(MVC)
	Model View Controller:
		Isolation of domain logic from user interface. 
		Permits independent development, testing and maintenence

	Model:
		manages the behavior and data of the application domain
		responds to requests for information about its state, usually from the "view"
		responds to instructions to change states, usually from the "controller"

	View:
		Renders the model into a form suitable for interaction, typically a user interface element
		Multiple views can exist for a single model for different purposes
		A viewpoint typically has one to one correspondence with a display surface and knows how to render to it

	Controller:
		receieves user input and initiates a response by making calls on model objects
		a controller accepts input from the user and instructs the model and viewport to perform actions based on that input

	MVC or MVVM(Model View View Model) or MVW (Model View Whatever)




	Angular Modules: A module is a container for different parts of your application, i.e, controllers, services, directives, filters, etc.

	<html ngApp="confusionApp">
	.....
	<script>
		var app = angular.module('confusionApp',[]);
	</script>

	Angular Controller:
		Javascript object containing attributes/properties and functions
		Exposes variables and functionality to expressions and directives
		Controller defined using a "ng-controller" directive on an HTML element
		<div class="row row-content"
			ng-controller="menuController as menuCtrl"> </div>


Angular Filters:
	A filter allows up to format the value of an expression for display to the end user. They do not modiify the underlying data.
	Filters can be used in view templates, controllers, or services. 
	Angular comes with a nubmer of built in filters.
	We can create our own filters in code.

Angular Built In Filters
	uppercase/lowercase - converts the text
	currency - formats the number as a currency
	date - formats the date as per the formatting specified
	filter - selects a subset of an array based on the criteria specified and returns a new array
	orderBy - orders the array based on the criteria specified


Angular Scope:
	Controller -> Scope -> View
The controller can set properties to scope, which becomes accesible to view
Topmost scope = $rootscope
Angular creats a new scope for each controller directive, which becomes a child of root scope
	


Dependency Design Injection:
	Software design pattern that implements inversion of control for resolving dependencies.
	Dependency: An object that can be used (a service)
	Injection: Passing of a dependency to a dependent object so that it can use it. The client does not need to build the object

	Dependency
		3 ways for a component to get hold of it dependencies:
			1. create dependency using new operator
			2. look up dependency using a global variable
			3 have dependency passed to it where needed
		Third option is most flexible. (Hard coding of dependency avoided. Testing becomes feasible)

	Dependency Injections has 4 roles: The service, the client, the interfaces, the injector(service is injected into client)


	Angular & Dependency Injection:
		seperation of business logic and dependency construction
		the dependency is passed to the object, consuming it where it is needed
		"Angular injector subsystem" is responsible for:
			creating components, resolving their dependencies, and providing them to other components.

	Dependency Injection is Extensively used in Angular
		Components such as services, directives, filters, and animations
			Defined by injectable factory method or constructors. Injected with service and value components.
		Controllers can be injected with the components
		The config and run methods also accept injection of some components

	Dependency Annotation in Angular
		Inline array annotation:
			module.controller('MenuController', ['$scope', 'menuFactory', function($scope, menuFactory) {...}]);

		$inject property annotation:
			var MenuController = function($scope,menuFactory) {...};

			MenuController.$inject = ['$scope', 'menuFactory'];

			module.controller('MenuController',MenuController);

		Implicit annotation:
			module.controller('MenuController', function($scope, menuFactory) {...}]);


Angular Services:
	Substantiate objects wired together using DI
	Allows organzing and sharing code across an app
	Lazily instantiated
	Singletons - software pattern? Look up! "only a single instance of that particular object"

Angular Built in Services
	ex: $http, $scope, $rootScope, $location, $parse, etc....


Angular Factories are always associated with Angular Modules!!!!
	When a call is made to a javascript factory, it is expected to return a javascript object

Angular Service:
	Instead of Declaring it as a factory, you declare it as a service. 

Factory vs Service = same code, just slightly different approach.





	

