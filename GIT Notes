GIT Notes

git init - initialize, the command sets up all the tools Git needs to begin tracking changes made to the project. Creates a new repository.

Git Projects = 3 parts:
	
	Working Directory - where you'll be doing all the work, creating, editing,
	deleting and organizing files

	Staging Area - where you'll list changes you make to the working directory

	Repository - where git permanently stores those changes as different versions 
	of the project

The Git Workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository.

git status - check status

"untracked files" - means that Git sees the file but has not started tracking changes yet

git add "filename" - adds a file to the staging area in order to track changes

git diff "filename" - shows the differences between the working directory and the staging area

git commit - the last step in Git workflow. A commit permanently stores changes from the staging area inside the repository. 
Standard Conventions: must be in quotation marks, written in present tense, should be brief when using "-m"

ex: git commit -m "Complete first line of dialogue"

Commits are stored chronologically and can be viewed with "git log"

git show HEAD - in many cases, the most recently made commit is the HEAD commit
The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed. 

git checkout HEAD filename - will restore the file in your working directory to look exactly as it did when you last made a commit. Essentially undo button.

You can commit multiple files simultaneously: git add file1 file2

git reset HEAD filename - unstages the file from the staging area. This comand resets the file in the staging area to be the same as the HEAD commit. It does not discard file changes from the working directory, it just removes them from the staging area. 

If you mess up TOO much, use: git reset "SHA"
use the first 7 characters of SHA you want to revert back to.
Ex: git reset 5d69206
This switches the HEAD commit to that previous commit, thus:
all commits afterwards no longer exist

git branch - shows what branch you're on

git branch "new branch name" - creates a new branch seperate from master branch

git checkout "branch name" - switches branches

git merge "branch name" - merges two branches, updating the master branch
ex: git merge fencing, while you are currently on master and fencing is more updated

If you try to merge and two branches conflict, i.e different text, you have to manually delete one

git branch -d "branch name" - will delete the specified branch from your Git project

git clone "remote location" "clone name" - clones something specific
"remote location" = tells git where to go, can be a web address or filepath
"clone name" = is the name you give to the directory in which git will clone the repository. Basically, its your local copy of what your copied

git remote -v = you can see a list of a git project's remotes

git fetch - a way to see if changes have been made to the remote and bring the changes down to your local copy. This command will not merge changes from the remote into your local repository. It brings those changes onto whats called a remote branch.

USUAL GIT WORKFLOW:
1. Fetch and merge changes from the remote
2. Create a branch to work on a new project feature
3. Develop the feature on your branch and commit your work
4. Fetch and merge from the remote again (in case new commits were made while you were working)
5. Push your branch up to the remote for review

git push origin "your branch name" - will push your branch up to the remote origin. From there, it can be reviewed and merged into the master branch, making it part of the definitive project version.






