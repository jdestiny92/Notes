Code School Angular Notes

A Directive is a marker on a HTML tag that tells Angular to run or reference some Javascript code.


Modules:
	- Where we write pieces of our Angular application
	- Makes our code more maintainable, testable, and readable
	- We can say "this module depends on these two modules"
	- Set dependencies and also define


Example:
	var app = angular.module('store', []);

	store -> application name
	[] -> Dependencies and other libraries we might need


Expressions:
	Allow you to insert dynamic values into your HTML

	Example:
		<p>I am {{4 + 6}}</p> Renders as 'I am 10'



Controllers:
	are where we define our apps behavior by defining functions and values

	Example of an object:
		var gem = {
			name: 'Docahedron',
			price: 2.95, 
			description: '....'
		}


	*Wrapping your Javascript in a closure is a good habit*
		
		(function () {
			var app = angular.module('store', []);

			app.controller('StoreController', function(){

				this.product = gem;
			});
				var gem = {
							name: 'Docahedron',
							price: 2.95, 
							description: '....'
						}
		})();

A controller only exists in where it is declared

If you want to call name in html, it would be: StorController.product.name
but if you set up the ng-controller StoreController as store, then it would just be store.product.name



Add a new key-name pair:
	var gem = {
							name: 'Docahedron',
							price: 2.95, 
							description: '....',
							canPurchase: false
						}

	Then you can make a button in the html:
		<button ng-show="store.product.canPurchase">Add to Cart</button>

	*This will only show the button when the given field is 'true'*


	This opposite of this would be using ng-Hide!

	First, you would make a key-name pair in gem, 'soldOut: true'
	Thus <div ng-hide="store.product.soldOut"> Will hide the div when soldOut is true


	
	However, we don't just want 1 gem, so we do this:


	app.controller('StoreController', function(){
		this.products = gems;
	});
	

	var gems = [
		{
			name:'Docahedron',
			price:2.95,
			description:'...',
			canPurchase:true,
		},

		{
			name:'Pentagonal Gem',
			price:5.95,
			description:'...',
			canPurchase:false,
		}
	];

	*Very important! Now if you want to repeat these, you don't need to list them individually!
	You can do: <div ng-repeat="product in store.products"


	Recap Vocab:
		Directives - HTML annotations that trigger Javascript behaviors
		Modules - Where our application components live
		Controllers - Where we add application behavior
		Expressions - How values get displayed within the page
		ng-app = attach the Module to the page
		ng-controller = how to attach a controller function to the page
		ng-show, ng-hide = based on an expression
		ng-repeat = a section for each item in an array (use JSON here)


	Currency filter:
		Ex: {{product.price | currency}} - means, take the output of the result of the first expression
		and 'pipe' it into the second expression

	General Filter Recipe:
		{{ data | filter:options }}

		{{'1388123412323' | date:'MM/dd/yyyy @ h:ma'}} yields 12/27/2013 @ 12:50AM

		uppercase & lowercase filters

		'Limit to Filter':
			<li ng-repeat="product in store.products | limitTo:3">
				Limits the amount of repeats

		'OrderBy Filer'
			<li ng-repeat="product in store.products | orderBy:'-price'">
			


	Adding an Image Array to our Product Array:
		var gems = [
			
			{name: 'Docahedron Gem',
			 description: '...',
			 images: [
			 {
			 	full: 'docahedron-01-full.jpg',
			 	thumb: 'docahedron-01-thumb.jpg'
			 },

			 {
			 	full:"dodehedron-02-full.jpg",
			 	......
			 }



			 }]}

		];

	*Very important: when loading pictures from angular array, you ng-src, not img-src!!!*


	



