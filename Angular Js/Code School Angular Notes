Code School Angular Notes

A Directive is a marker on a HTML tag that tells Angular to run or reference some Javascript code.


Modules:
	- Where we write pieces of our Angular application
	- Makes our code more maintainable, testable, and readable
	- We can say "this module depends on these two modules"
	- Set dependencies and also define


Example:
	var app = angular.module('store', []);

	store -> application name
	[] -> Dependencies and other libraries we might need


Expressions:
	Allow you to insert dynamic values into your HTML

	Example:
		<p>I am {{4 + 6}}</p> Renders as 'I am 10'



Controllers:
	are where we define our apps behavior by defining functions and values

	Example of an object:
		var gem = {
			name: 'Docahedron',
			price: 2.95, 
			description: '....'
		}


	*Wrapping your Javascript in a closure is a good habit*
		
		(function () {
			var app = angular.module('store', []);

			app.controller('StoreController', function(){

				this.product = gem;
			});
				var gem = {
							name: 'Docahedron',
							price: 2.95, 
							description: '....'
						}
		})();

A controller only exists in where it is declared

If you want to call name in html, it would be: StorController.product.name
but if you set up the ng-controller StoreController as store, then it would just be store.product.name



Add a new key-name pair:
	var gem = {
							name: 'Docahedron',
							price: 2.95, 
							description: '....',
							canPurchase: false
						}

	Then you can make a button in the html:
		<button ng-show="store.product.canPurchase">Add to Cart</button>

	*This will only show the button when the given field is 'true'*


	This opposite of this would be using ng-Hide!

	First, you would make a key-name pair in gem, 'soldOut: true'
	Thus <div ng-hide="store.product.soldOut"> Will hide the div when soldOut is true


	
	However, we don't just want 1 gem, so we do this:


	app.controller('StoreController', function(){
		this.products = gems;
	});
	

	var gems = [
		{
			name:'Docahedron',
			price:2.95,
			description:'...',
			canPurchase:true,
		},

		{
			name:'Pentagonal Gem',
			price:5.95,
			description:'...',
			canPurchase:false,
		}
	];

	*Very important! Now if you want to repeat these, you don't need to list them individually!
	You can do: <div ng-repeat="product in store.products"


	Recap Vocab:
		Directives - HTML annotations that trigger Javascript behaviors
		Modules - Where our application components live
		Controllers - Where we add application behavior
		Expressions - How values get displayed within the page
		ng-app = attach the Module to the page
		ng-controller = how to attach a controller function to the page
		ng-show, ng-hide = based on an expression
		ng-repeat = a section for each item in an array (use JSON here)


	Currency filter:
		Ex: {{product.price | currency}} - means, take the output of the result of the first expression
		and 'pipe' it into the second expression

	General Filter Recipe:
		{{ data | filter:options }}

		{{'1388123412323' | date:'MM/dd/yyyy @ h:ma'}} yields 12/27/2013 @ 12:50AM

		uppercase & lowercase filters

		'Limit to Filter':
			<li ng-repeat="product in store.products | limitTo:3">
				Limits the amount of repeats

		'OrderBy Filer'
			<li ng-repeat="product in store.products | orderBy:'-price'">
			


	Adding an Image Array to our Product Array:
		var gems = [
			
			{name: 'Docahedron Gem',
			 description: '...',
			 images: [
			 {
			 	full: 'docahedron-01-full.jpg',
			 	thumb: 'docahedron-01-thumb.jpg'
			 },

			 {
			 	full:"dodehedron-02-full.jpg",
			 	......
			 }



			 }]}

		];

	*Very important: when loading pictures from angular array, use ng-src, not img-src!!!*



		Angular Tabs:
			-You can bootstrap to set up tabs, ex: <ul class="nav nav-pills">
			-You then can add <ng-click> directive to each <li>, ex: <li><a href ng-click="tab = 1">Description</a></li>
			-Then if you write {{tab}} as an expression, you can dynamically change whats on the screen simply by clicking!


	*Very important: Expressions define a 2 way Data Binding, this means Expressions are re-evaluated when a property changes

	So! You can set tab = some number; then make the panels below this code, the information you want to show indiviudally
	Then set each individual panel with the directive <ng show="tab===certainNumber"; Thus clicking on individual tabs
	will show the correspoding panel of information and will reset after every click!



	Ng-Init:
		- Allows us to evaluate an expression in the current scope.

		So for the previous example, because when you first load the page nothing happens, you can use Ng-Init!
		You would write: <section ng-init="tab = 1"> Thus this will trigger the show directives, showing the first
		panel automatically, however still keeping the overall functionality and allowing for different panels to be
		clicked and shown.


	Ng-Class:
		- Angulars version of setting a class

		In regards to the ongoing example, wouldn't it be nice if the tab you clicked would show up as active each time?
		Taking advantage that bootstrap has that ability by setting a class to active, you would then use 'Ng-Class'

		Ex: <li ng-class="{ active:tab === 1 }"> This translates to: when tab === 1, make this class active!
		Thus you can change this number, 2,3,etc for as many tabs as you have and each will become active when clicked!


	*Now that you have all this code, you realize its messy. Too much in-line hard coding. So the next step would be to
	move everything to a controller. You make a new controller called 'PanelController as panel'
	1.Then in app.js, define panel controller: app.controller('PanelController', function() {});
	2.Now you can remove ng-init for ng-controller. And inside the controller write: this.tab = 1;
	This activates the default description the same way ng-init did.
	3. app.controller("PanelController", function(){
		this.tab = 1;

		this.selectTab = function(setTab) {
			this.tab = setTab;
		};

		this.isSelected = function(checkTab){
			return this.tab === checkTab;
		};
	});

	4. ng-class="{ active: panel.isSelected(1) or (2) or (3) }"

	5. ng-click="panel.selectTabe(1) or (2) or (3)"

	6. Set the panel div class to ng-show="panel.isSelected(1)"


Ng-Model(2 Way Binding) Notes:

	Checkbox - sets value to either true or false
	Radio Button - sets the value based on what is selected
	

